// Generated by gencpp from file UR3e_RG2_ER5_vision/SheeMsg.msg
// DO NOT EDIT!


#ifndef UR3E_RG2_ER5_VISION_MESSAGE_SHEEMSG_H
#define UR3E_RG2_ER5_VISION_MESSAGE_SHEEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace UR3e_RG2_ER5_vision
{
template <class ContainerAllocator>
struct SheeMsg_
{
  typedef SheeMsg_<ContainerAllocator> Type;

  SheeMsg_()
    : hey_name()
    , hey_age(0)  {
    }
  SheeMsg_(const ContainerAllocator& _alloc)
    : hey_name(_alloc)
    , hey_age(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hey_name_type;
  _hey_name_type hey_name;

   typedef uint8_t _hey_age_type;
  _hey_age_type hey_age;





  typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SheeMsg_

typedef ::UR3e_RG2_ER5_vision::SheeMsg_<std::allocator<void> > SheeMsg;

typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::SheeMsg > SheeMsgPtr;
typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::SheeMsg const> SheeMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator1> & lhs, const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator2> & rhs)
{
  return lhs.hey_name == rhs.hey_name &&
    lhs.hey_age == rhs.hey_age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator1> & lhs, const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace UR3e_RG2_ER5_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1044e1e78017b18872c4953bd0e40998";
  }

  static const char* value(const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1044e1e78017b188ULL;
  static const uint64_t static_value2 = 0x72c4953bd0e40998ULL;
};

template<class ContainerAllocator>
struct DataType< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "UR3e_RG2_ER5_vision/SheeMsg";
  }

  static const char* value(const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string hey_name\n"
"uint8 hey_age\n"
;
  }

  static const char* value(const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hey_name);
      stream.next(m.hey_age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SheeMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::UR3e_RG2_ER5_vision::SheeMsg_<ContainerAllocator>& v)
  {
    s << indent << "hey_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hey_name);
    s << indent << "hey_age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hey_age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR3E_RG2_ER5_VISION_MESSAGE_SHEEMSG_H
