// Generated by gencpp from file UR3e_RG2_ER5_vision/UR3Msg.msg
// DO NOT EDIT!


#ifndef UR3E_RG2_ER5_VISION_MESSAGE_UR3MSG_H
#define UR3E_RG2_ER5_VISION_MESSAGE_UR3MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace UR3e_RG2_ER5_vision
{
template <class ContainerAllocator>
struct UR3Msg_
{
  typedef UR3Msg_<ContainerAllocator> Type;

  UR3Msg_()
    : Obj_name()
    , Obj_Pose()
    , Radius(0.0)  {
    }
  UR3Msg_(const ContainerAllocator& _alloc)
    : Obj_name(_alloc)
    , Obj_Pose(_alloc)
    , Radius(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Obj_name_type;
  _Obj_name_type Obj_name;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _Obj_Pose_type;
  _Obj_Pose_type Obj_Pose;

   typedef double _Radius_type;
  _Radius_type Radius;





  typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> const> ConstPtr;

}; // struct UR3Msg_

typedef ::UR3e_RG2_ER5_vision::UR3Msg_<std::allocator<void> > UR3Msg;

typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::UR3Msg > UR3MsgPtr;
typedef boost::shared_ptr< ::UR3e_RG2_ER5_vision::UR3Msg const> UR3MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator1> & lhs, const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator2> & rhs)
{
  return lhs.Obj_name == rhs.Obj_name &&
    lhs.Obj_Pose == rhs.Obj_Pose &&
    lhs.Radius == rhs.Radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator1> & lhs, const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace UR3e_RG2_ER5_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58d1707d0143a3a0da3fcde7e0164d11";
  }

  static const char* value(const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58d1707d0143a3a0ULL;
  static const uint64_t static_value2 = 0xda3fcde7e0164d11ULL;
};

template<class ContainerAllocator>
struct DataType< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "UR3e_RG2_ER5_vision/UR3Msg";
  }

  static const char* value(const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Obj_name\n"
"geometry_msgs/Pose Obj_Pose\n"
"float64 Radius\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Obj_name);
      stream.next(m.Obj_Pose);
      stream.next(m.Radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UR3Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::UR3e_RG2_ER5_vision::UR3Msg_<ContainerAllocator>& v)
  {
    s << indent << "Obj_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Obj_name);
    s << indent << "Obj_Pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.Obj_Pose);
    s << indent << "Radius: ";
    Printer<double>::stream(s, indent + "  ", v.Radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR3E_RG2_ER5_VISION_MESSAGE_UR3MSG_H
