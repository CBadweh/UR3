<?xml version="1.0"?>
<launch>
  <arg name="limited" default="false" doc="If true, limits joint range [-PI, PI] on all joints." />
  <!-- <arg name="paused" default="false" doc="Starts gazebo in paused mode" /> -->
  <arg name="paused" default="false" />
  <arg name="gui" default="true" doc="Starts gazebo gui" />
  
  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find UR3e_RG2_ER5_description)/worlds/full_robot.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="verbose" value="true"/>
  </include>

  <!-- send robot urdf to param server -->
  <include file="$(find UR3e_RG2_ER5_description)/launch/ur3e_upload.launch">
  </include>

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 0.1" respawn="false" output="screen" />

  <include file="$(find ur_e_gazebo)/launch/controller_utils.launch"/>







  <!-- start this controller -->
  <rosparam file="$(find ur_e_gazebo)/controller/arm_controller_ur3e.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller kinect_joint_controller" respawn="false" output="screen"/>

<!--    <node name="camera_spawner" pkg="controller_manager" type="spawner" ns="/camera_controller" args="joint_state_controller kinect_joint_controller" respawn="false" output="screen"/> -->

  <!-- load other controllers -->
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" />

  <!--<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
    <param name="use_gui" value="true"/>
  </node>-->
  <!--<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />-->
  <!--<node name="rviz" pkg="rviz" type="rviz" args="-d $(find ur_e_description)/cfg/view_robot.rviz" required="true" />-->



  <!-- ######################################  C Badweh's Code  ######################################## -->

  <!-- correct the pointcloud orientation, by creating a dummy link "kinect_optical_link" in kinect_camera.urdf.xacro, which connect to camera_link
       then create this tf static_transform_publisher-->
  <node pkg="tf" type="static_transform_publisher" name="camera_link_broadcaster" args="0.0 0.0 0.0 -1.57 0 -1.57  camera_link kinect_optical_link 1" />




</launch>
